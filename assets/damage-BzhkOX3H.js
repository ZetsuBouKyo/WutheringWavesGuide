var E=Object.defineProperty;var P=(a,t,e)=>t in a?E(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var n=(a,t,e)=>P(a,typeof t!="symbol"?t+"":t,e);import{R as N,u as D,i as A,j as m,k as p,l as S}from"./resonator-BuYZw9VB.js";import{T as O}from"./template-B3QxRSLI.js";import{b as I,c as o,a as i,t as r,m as v,d as h}from"./utils-CVNhfOQy.js";import"./index-DNTNsnF1.js";function T(a,t){const e=a.damage,s=t.damage;return!e||!s?0:s-e}function C(a){const t=new A;return t.element=a.resonator.element_zh_tw,t.name=a.resonator.name,t.chain=a.resonator.chain,t.weapon_name=a.weapon.name,t.weapon_rank=a.weapon.tune,t.weapon_level=a.weapon.level,t.level=a.resonator.level,t.hp=a.getHp(),t.attack=a.getAtk(),t.defense=a.getDef(),t.crit_rate=a.getCritRate(),t.crit_dmg=a.getCritDmg(),t.energy_regen=a.getEnergyRegen(),t.resonance_skill_dmg_bonus=i(a.getStat(m.BONUS_RESONANCE_SKILL)),t.basic_attack_dmg_bonus=i(a.getStat(m.BONUS_BASIC_ATTACK)),t.heavy_attack_dmg_bonus=i(a.getStat(m.BONUS_HEAVY_ATTACK)),t.resonance_liberation_dmg_bonus=i(a.getStat(m.BONUS_RESONANCE_LIBERATION)),t.healing_bonus=i(a.getStat(m.BONUS_HEALING)),t.physical_dmg_bonus=i(a.getStat(m.BONUS_PHYSICS)),t.glacio_dmg_bonus=i(a.getStat(m.BONUS_GLACIO)),t.fusion_dmg_bonus=i(a.getStat(m.BONUS_FUSION)),t.electro_dmg_bonus=i(a.getStat(m.BONUS_ELECTRO)),t.aero_dmg_bonus=i(a.getStat(m.BONUS_AERO)),t.spectro_dmg_bonus=i(a.getStat(m.BONUS_SPECTRO)),t.havoc_dmg_bonus=i(a.getStat(m.BONUS_HAVOC)),t.physical_dmg_res=i(0),t.glacio_dmg_res=i(0),t.fusion_dmg_res=i(0),t.electro_dmg_res=i(0),t.aero_dmg_res=i(0),t.spectro_dmg_res=i(0),t.havoc_dmg_res=i(0),t.normal_attack_lv=a.resonator.normal_attack_lv,t.resonance_skill_lv=a.resonator.resonance_skill_lv,t.resonance_liberation_lv=a.resonator.resonance_liberation_lv,t.forte_circuit_lv=a.resonator.forte_circuit_lv,t.intro_skill_lv=a.resonator.intro_skill_lv,t.inherent_skill_1=a.resonator.inherent_skill_1?"✓":"x",t.inherent_skill_2=a.resonator.inherent_skill_2?"✓":"x",t.echo_hp=r(a.echoes.summary.getStat(m.HP)),t.echo_hp_p=i(a.echoes.summary.getStat(m.HP_P)),t.echo_atk=r(a.echoes.summary.getStat(m.ATK)),t.echo_atk_p=i(a.echoes.summary.getStat(m.ATK_P)),t.echo_def=r(a.echoes.summary.getStat(m.DEF)),t.echo_def_p=i(a.echoes.summary.getStat(m.DEF_P)),t.echo_crit_rate=i(a.echoes.summary.getStat(m.CRIT_RATE)),t.echo_crit_dmg=i(a.echoes.summary.getStat(m.CRIT_DMG)),t.echo_energy_regen=i(a.echoes.summary.getStat(m.ENERGY_REGEN)),t.echo_sonata_1=a.echoes.echoes[0].sonata,t.echo_sonata_2=a.echoes.echoes[1].sonata,t.echo_sonata_3=a.echoes.echoes[2].sonata,t.echo_sonata_4=a.echoes.echoes[3].sonata,t.echo_sonata_5=a.echoes.echoes[4].sonata,t.echo_resonance_skill_dmg_bonus=i(a.echoes.summary.getStat(m.BONUS_RESONANCE_SKILL)),t.echo_basic_attack_dmg_bonus=i(a.echoes.summary.getStat(m.BONUS_BASIC_ATTACK)),t.echo_heavy_attack_dmg_bonus=i(a.echoes.summary.getStat(m.BONUS_HEAVY_ATTACK)),t.echo_resonance_liberation_dmg_bonus=i(a.echoes.summary.getStat(m.BONUS_RESONANCE_LIBERATION)),t.echo_healing_bonus=i(a.echoes.summary.getStat(m.BONUS_HEALING)),t.echo_glacio_dmg_bonus=i(a.echoes.summary.getStat(m.BONUS_GLACIO)),t.echo_fusion_dmg_bonus=i(a.echoes.summary.getStat(m.BONUS_FUSION)),t.echo_electro_dmg_bonus=i(a.echoes.summary.getStat(m.BONUS_ELECTRO)),t.echo_aero_dmg_bonus=i(a.echoes.summary.getStat(m.BONUS_AERO)),t.echo_spectro_dmg_bonus=i(a.echoes.summary.getStat(m.BONUS_SPECTRO)),t.echo_havoc_dmg_bonus=i(a.echoes.summary.getStat(m.BONUS_HAVOC)),t}class M{constructor(){n(this,"resonator_id","");n(this,"resonator_name","");n(this,"basic","");n(this,"heavy","");n(this,"skill","");n(this,"liberation","");n(this,"intro","");n(this,"outro","");n(this,"echo","");n(this,"coordinated_attack","");n(this,"none","");n(this,"normal_attack","");n(this,"resonance_skill","");n(this,"resonance_liberation","");n(this,"intro_skill","");n(this,"forte_circuit","");n(this,"outro_skill","");n(this,"damage","");n(this,"damage_no_crit","");n(this,"damage_crit","");n(this,"skills",{})}addRow(t){const e=t.calculation.result.damage,s=t.calculation.result.damage_no_crit,_=t.calculation.result.damage_crit;this.damage=r(o(this.damage).plus(o(e))),this.damage_no_crit=r(o(this.damage_no_crit).plus(o(s))),this.damage_crit=r(o(this.damage_crit).plus(o(_)));const g=t.calculation.result.resonator_skill_type;switch(g){case p.NORMAL_ATTACK:this.normal_attack=r(o(e).plus(h(this.normal_attack)));break;case p.RESONANCE_SKILL:this.resonance_skill=r(o(e).plus(h(this.resonance_skill)));break;case p.FORTE_CIRCUIT:this.forte_circuit=r(o(e).plus(h(this.forte_circuit)));break;case p.RESONANCE_LIBERATION:this.resonance_liberation=r(o(e).plus(h(this.resonance_liberation)));break;case p.INTRO_SKILL:this.intro_skill=r(o(e).plus(h(this.intro_skill)));break;case p.OUTRO_SKILL:this.outro_skill=r(o(e).plus(h(this.outro_skill)));break}t.calculation.result.result_bonus_types.forEach(u=>{switch(u){case S.BASIC:this.basic=r(o(e).plus(h(this.basic)));break;case S.HEAVY:this.heavy=r(o(e).plus(h(this.heavy)));break;case S.SKILL:this.skill=r(o(e).plus(h(this.skill)));break;case S.LIBERATION:this.liberation=r(o(e).plus(h(this.liberation)));break;case S.INTRO:this.intro=r(o(e).plus(h(this.intro)));break;case S.OUTRO:this.outro=r(o(e).plus(h(this.outro)));break;case S.ECHO:this.echo=r(o(e).plus(h(this.echo)));break;case S.COORDINATED_ATTACK:this.coordinated_attack=r(o(e).plus(h(this.coordinated_attack)));break;case S.NONE:case"":this.none=r(o(e).plus(h(this.none)))}});const c=t.skill_id;if(c)if(this.skills[c]===void 0)this.skills[c]={id:c,name:"",type:g,damage:e};else{const u=this.skills[c].damage;this.skills[c].damage=r(o(u).plus(o(e)))}}}class k{constructor(t={}){n(this,"template_id","");n(this,"monster_id","");n(this,"duration_1","");n(this,"duration_2","");n(this,"damage","");n(this,"damage_no_crit","");n(this,"damage_crit","");n(this,"resonators",{});n(this,"rows",[]);!t||Object.keys(t).length===0||Object.assign(this,t)}getHashedTemplateID(){return v(this.template_id)}getJson(){return JSON.parse(JSON.stringify(this))}getRowCalculationResults(){const t=[];return this.rows.forEach(e=>{t.push(e.calculation.result)}),t}getMaxTeamDPS(){if(this.duration_1&&this.duration_2&&this.damage){const t=o(this.duration_1);return o(this.damage).dividedBy(t).toNumber()}return 0}getMaxTeamDPSString(){const t=this.getMaxTeamDPS();return r(t)}getMinTeamDPS(){if(this.duration_1&&this.duration_2&&this.damage){const t=o(this.duration_2);return o(this.damage).dividedBy(t).toNumber()}return 0}getMinTeamDPSString(){const t=this.getMinTeamDPS();return r(t)}getTeamDPSString(){if(this.duration_1&&this.duration_2&&this.damage){const t=this.duration_1,e=this.duration_2,s=r(this.getMinTeamDPS()),_=r(this.getMaxTeamDPS());return`${s} (${e}s) ~ ${_} (${t}s)`}return""}getTeamDPSPercentageString(t){if(this.duration_1&&this.duration_2&&this.damage){const s=this.getMaxTeamDPS()/t;return i(s)}return""}getTeamDamagePercentageString(t){if(this.damage){const e=o(this.damage);return i(e.dividedBy(o(t)))}return""}getResonatorNames(){return Object.keys(this.resonators)}getResonatorIDByResonatorName(t){return this.resonators[t].resonator_id}getResonatorIconSources(){const t=[],e=D();return Object.keys(this.resonators).forEach(s=>{const _=e.getNoByName(s),g=e.getIconSrcByNo(_);t.push(g)}),t}getResonatorDamage(t){var s;const e=(s=this.resonators[t])==null?void 0:s.damage;return e?o(e).toNumber():0}getResonatorDamageString(t){const e=this.getResonatorDamage(t);return r(e)}getResonatorMaxDPS(t){const e=this.getResonatorDamage(t);return this.duration_1&&this.duration_2&&e?o(e).dividedBy(o(this.duration_1)).toNumber():0}getResonatorMaxDPSPercentageByBasedDPS(t,e){return this.getResonatorMaxDPS(t)/e}getResonatorMaxDPSPercentageStringByBasedDPS(t,e){const s=this.getResonatorMaxDPSPercentageByBasedDPS(t,e);return i(s)}getResonatorMaxDPSPercentage(t){const e=this.getResonatorMaxDPS(t),s=this.getMaxTeamDPS();return e/s}getResonatorMaxDPSPercentageString(t){const e=this.getResonatorMaxDPSPercentage(t);return i(e)}getResonatorDPSString(t){const e=this.getResonatorMaxDPS(t);return r(e)}getResonatorSkillBars(t){const e=[],s=this.resonators[t];if((s==null?void 0:s.damage)===void 0)return e;const _=o(this.duration_1),g=o(s.damage),d=s.skills;return Object.keys(d).forEach(u=>{const l=d[u],b=o(l.damage),y=b.dividedBy(_),B=b.dividedBy(g),R={text:u,dps:y.toNumber(),dpsString:r(y),damage:b.toNumber(),damageString:r(b),percentage:B.toNumber(),percentageString:i(B),data:l};e.push(R)}),e.sort(T),e}getResonatorSkillTypeBars(t){const e=[],s=this.resonators[t];if((s==null?void 0:s.damage)===void 0)return e;const _=o(s.damage);return["normal_attack","resonance_skill","forte_circuit","resonance_liberation","intro_skill","outro_skill"].forEach(d=>{const c=o(s[d]),u=c.dividedBy(_),l={text:d,damage:c.toNumber(),damageString:r(c),percentage:u.toNumber(),percentageString:i(u)};e.push(l)}),e}getResonatorSkillBonusBars(t){const e=[],s=this.resonators[t];if((s==null?void 0:s.damage)===void 0)return e;const _=o(s.damage);return["basic","heavy","skill","liberation","intro","outro","echo","coordinated_attack","none"].forEach(d=>{const c=o(s[d]),u=c.dividedBy(_),l={text:d,damage:c.toNumber(),damageString:r(c),percentage:u.toNumber(),percentageString:i(u)};e.push(l)}),e}updateByTemplate(t,e=[]){this.template_id=t.id,this.monster_id=t.monster_id,this.duration_1=t.duration_1,this.duration_2=t.duration_2,this.resonators={},t.calculation.resonators.forEach(c=>{const u=c.getId(),l=c.resonator.name;this.resonators[l]=new M,this.resonators[l].resonator_id=u,this.resonators[l].resonator_name=l});const s=t.getCalculatedRows(e);let _=o(0),g=o(0),d=o(0);s.forEach(c=>{const u=c.resonator_name;this.resonators[u].addRow(c),_=_.plus(o(c.calculation.result.damage)),g=g.plus(o(c.calculation.result.damage_no_crit)),d=d.plus(o(c.calculation.result.damage_crit))}),this.damage=r(_),this.damage_no_crit=r(g),this.damage_crit=r(d),this.rows=s}}class f{constructor(t={}){n(this,"_data",[]);!t||Object.keys(t).length===0||(Object.assign(this,t),this._data=t)}getBars(t,e){const s=[];return this._data.length===0||t===0?[]:(this._data.forEach(_=>{const g=_[0],d=new k(_[1]),c=o(t).minus(o(d.damage)),u=c.dividedBy(t),l=o(e).minus(o(d.getMaxTeamDPS())),b={text:g,dps:l.toNumber(),dpsString:r(l),damage:c.toNumber(),damageString:r(c),percentage:u.toNumber(),percentageString:i(u)};s.push(b)}),s.sort(T),s)}}class H{constructor(t={},e=""){n(this,"affixPolicy","");n(this,"resonator_template",new O);n(this,"resonator_models",new N);n(this,"damage_distribution",new k);n(this,"damage_distributions_with_buffs",new f);n(this,"calculated_rows",[]);if(!t||Object.keys(t).length===0)return;const{resonator_template:s,resonator_models:_,damage_distribution:g,damage_distributions_with_buffs:d,...c}=t;Object.assign(this,c),this.affixPolicy=e,this.resonator_template=new O(s),this.resonator_models=new N(_),this.damage_distribution=new k(g),this.damage_distributions_with_buffs=new f(d)}getTeamDamageDistribution(){return this.damage_distribution}getResonatorDamageAnalysis(t){const s=D().getNameByNo(t);return I(this,`damage_distribution.resonators.${s}`)}getResonatorModelByName(t){for(const e of Object.values(this.resonator_models))if((e==null?void 0:e.name)===t)return e}getCalculatedRowBars(){const t=this.damage_distribution.getMaxTeamDPS();let e=this.calculated_rows;e.length===0&&(e=this.damage_distribution.getRowCalculationResults());const s=[];let _=0;return e.forEach(g=>{let d=0;g.damage&&(d=o(g.damage).toNumber()),_=Math.max(_,d)}),e.forEach(g=>{let d=0;g.damage&&(d=o(g.damage).toNumber());const c=d/_;let u=`【${g.action}】${g.skill_id}`;g.action||(u=g.skill_id);let l="white";d<=t&&(l="blue-grey-darken-2"),g.baseDamage=_,g.color=l;const b={text:u,damage:d,damageString:r(d),percentage:c,percentageString:i(c),data:g};s.push(b)}),s}getDamageDistributionsWithBuffsBars(){const t=o(this.damage_distribution.damage).toNumber(),e=this.damage_distribution.getMaxTeamDPS();return this.damage_distributions_with_buffs.getBars(t,e)}calculateByTemplate(t){this.resonator_template=t,this.resonator_models=new N,t.calculation.resonators.forEach(_=>{const g=_.resonator.name;_.echoes.updateSummaryByEchoes();const d=C(_);d.echo1=this.resonator_template.getResonatorEcho1(g);const c=_.getId();this.resonator_models[c]=d}),this.damage_distribution=new k,this.damage_distribution.updateByTemplate(this.resonator_template);const e=[];this.resonator_template.getRowBuffNames().forEach(_=>{const g=new k;g.updateByTemplate(this.resonator_template,[_]),e.push([_,g.getJson()])}),this.damage_distributions_with_buffs=new f(e)}}export{H as D,k as T};
