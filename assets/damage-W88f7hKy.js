var x=Object.defineProperty;var T=(d,t,e)=>t in d?x(d,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):d[t]=e;var i=(d,t,e)=>T(d,typeof t!="symbol"?t+"":t,e);import{b as k,a as u,t as c,m as M}from"./utils-CKOygh4Q.js";import{T as D}from"./template-YCnPmcDc.js";import{u as b}from"./resonator-Db-i-zYr.js";import"./echoes-CvqTKTUu.js";import"./index-C_NND7DR.js";function f(d,t){const e=d.damage,a=t.damage;return!e||!a?0:a-e}class p{constructor(t={}){i(this,"template_id","");i(this,"monster_id","");i(this,"duration_1","");i(this,"duration_2","");i(this,"damage","");i(this,"damage_no_crit","");i(this,"damage_crit","");i(this,"resonators",{});t&&Object.keys(t).length>0&&Object.assign(this,t)}getHashedTemplateID(){return M(this.template_id)}getMaxTeamDPS(){if(this.duration_1&&this.duration_2&&this.damage){const t=parseFloat(this.duration_1);return parseFloat(this.damage)/t}return 0}getMaxTeamDPSString(){const t=this.getMaxTeamDPS();return c(t)}getMinTeamDPS(){if(this.duration_1&&this.duration_2&&this.damage){const t=parseFloat(this.duration_2);return parseFloat(this.damage)/t}return 0}getMinTeamDPSString(){const t=this.getMinTeamDPS();return c(t)}getTeamDPSString(){if(this.duration_1&&this.duration_2&&this.damage){const t=parseFloat(this.duration_1),e=parseFloat(this.duration_2),a=c(this.getMinTeamDPS()),o=c(this.getMaxTeamDPS());return`${a} (${e}s) ~ ${o} (${t}s)`}return""}getTeamDPSPercentageString(t){if(this.duration_1&&this.duration_2&&this.damage){const a=this.getMaxTeamDPS()/t;return u(a)}return""}getTeamDamagePercentageString(t){if(this.damage){const e=parseFloat(this.damage);return u(e/t)}return""}getResonatorNames(){return Object.keys(this.resonators)}getResonatorIDByResonatorName(t){return this.resonators[t].resonator_id}getResonatorIconSources(){const t=[],e=b();return Object.keys(this.resonators).forEach(a=>{const o=e.getNoByName(a),s=e.getIconSrcByNo(o);t.push(s)}),t}getResonatorDamage(t){return parseFloat(this.resonators[t].damage)}getResonatorDamageString(t){const e=this.getResonatorDamage(t);return c(e)}getResonatorMaxDPS(t){const e=this.getResonatorDamage(t);return this.duration_1&&this.duration_2&&e?e/parseFloat(this.duration_1):0}getResonatorMaxDPSPercentageByBasedDPS(t,e){return this.getResonatorMaxDPS(t)/e}getResonatorMaxDPSPercentageStringByBasedDPS(t,e){const a=this.getResonatorMaxDPSPercentageByBasedDPS(t,e);return u(a)}getResonatorMaxDPSPercentage(t){const e=this.getResonatorMaxDPS(t),a=this.getMaxTeamDPS();return e/a}getResonatorMaxDPSPercentageString(t){const e=this.getResonatorMaxDPSPercentage(t);return u(e)}getResonatorDPSString(t){const e=this.getResonatorMaxDPS(t);return c(e)}getResonatorSkillBars(t){const e=parseFloat(this.duration_1),a=this.resonators[t],o=parseFloat(a.damage),s=a.skills,r=Object.keys(s),n=[];return r.forEach(g=>{const m=s[g],h=parseFloat(m.damage),l=h/e,S=h/o,P={text:g,dps:l,dpsString:c(l),damage:h,damageString:c(h),percentage:S,percentageString:u(S),data:m};n.push(P)}),n.sort(f),n}getResonatorSkillTypeBars(t){const e=this.resonators[t],a=parseFloat(e.damage),o=["normal_attack","resonance_skill","forte_circuit","resonance_liberation","intro_skill","outro_skill"],s=[];return o.forEach(r=>{const n=parseFloat(e[r]),g=n/a,m={text:r,damage:n,damageString:c(n),percentage:g,percentageString:u(g)};s.push(m)}),s}getResonatorSkillBonusBars(t){const e=this.resonators[t],a=parseFloat(e.damage),o=["basic","heavy","skill","liberation","intro","outro","echo","coordinated_attack","none"],s=[];return o.forEach(r=>{const n=parseFloat(e[r]),g=n/a,m={text:r,damage:n,damageString:c(n),percentage:g,percentageString:u(g)};s.push(m)}),s}}class _{constructor(t={}){i(this,"_data");t&&Object.keys(t).length>0&&(Object.assign(this,t),this._data=t)}getBars(t,e){const a=[];return this._data.forEach(o=>{const s=o[0],r=new p(o[1]),n=t-parseFloat(r.damage),g=n/t,m=e-r.getMaxTeamDPS(),h={text:s,dps:m,dpsString:c(m),damage:n,damageString:c(n),percentage:g,percentageString:u(g)};a.push(h)}),a.sort(f),a}}class O{constructor(t={},e=""){i(this,"affixPolicy","");i(this,"resonator_template",new D);i(this,"damage_distribution",new p);i(this,"damage_distributions_with_buffs",new _);i(this,"calculated_rows",[]);t&&Object.keys(t).length>0&&(Object.assign(this,t),this.affixPolicy=e,this.resonator_template=new D(this.resonator_template),this.damage_distribution=new p(this.damage_distribution),this.damage_distributions_with_buffs=new _(this.damage_distributions_with_buffs))}getTeamDamageDistribution(){return this.damage_distribution}getResonatorDamageAnalysis(t){const a=b().getNameByNo(t);return k(this,`damage_distribution.resonators.${a}`)}getCalculatedRowBars(){const t=this.damage_distribution.getMaxTeamDPS(),e=this.calculated_rows,a=[];let o=0;return e.forEach(s=>{let r=0;s.damage&&(r=parseFloat(s.damage)),o=Math.max(o,r)}),e.forEach(s=>{let r=0;s.damage&&(r=parseFloat(s.damage));const n=r/o;let g=`【${s.action}】${s.skill_id}`;s.action||(g=s.skill_id);let m="white";r<=t&&(m="blue-grey-darken-2"),s.baseDamage=o,s.color=m;const h={text:g,damage:r,damageString:c(r),percentage:n,percentageString:u(n),data:s};a.push(h)}),a}}export{O as D,p as T};
