var P=Object.defineProperty;var f=(m,t,a)=>t in m?P(m,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):m[t]=a;var d=(m,t,a)=>f(m,typeof t!="symbol"?t+"":t,a);import{d as x,c as u,t as g,m as T}from"./utils-CPbef2nh.js";import{T as M}from"./template-BhMrjiat.js";import{u as S}from"./resonator-C6eGKmCC.js";function D(m,t){const a=m.damage,e=t.damage;return!a||!e?0:e-a}class _{constructor(t){d(this,"template_id");d(this,"duration_1");d(this,"duration_2");d(this,"damage");d(this,"resonators");Object.assign(this,t)}getHashedTemplateID(){return T(this.template_id)}getMaxTeamDPS(){if(this.duration_1&&this.duration_2&&this.damage){const t=parseFloat(this.duration_1);return parseFloat(this.damage)/t}return 0}getMaxTeamDPSString(){const t=this.getMaxTeamDPS();return g(t)}getMinTeamDPS(){if(this.duration_1&&this.duration_2&&this.damage){const t=parseFloat(this.duration_2);return parseFloat(this.damage)/t}return 0}getMinTeamDPSString(){const t=this.getMinTeamDPS();return g(t)}getTeamDPSString(){if(this.duration_1&&this.duration_2&&this.damage){const t=parseFloat(this.duration_1),a=parseFloat(this.duration_2),e=g(this.getMinTeamDPS()),o=g(this.getMaxTeamDPS());return`${e} (${a}s) ~ ${o} (${t}s)`}return""}getTeamDPSPercentageString(t){if(this.duration_1&&this.duration_2&&this.damage){const e=this.getMaxTeamDPS()/t;return u(e)}return""}getTeamDamagePercentageString(t){if(this.damage){const a=parseFloat(this.damage);return u(a/t)}return""}getResonatorNames(){return Object.keys(this.resonators)}getResonatorIDByResonatorName(t){return this.resonators[t].resonator_id}getResonatorIconSources(){const t=[],a=S();return Object.keys(this.resonators).forEach(e=>{const o=a.getNoByName(e),s=a.getIconSrcByNo(o);t.push(s)}),t}getResonatorDamage(t){return parseFloat(this.resonators[t].damage)}getResonatorDamageString(t){const a=this.getResonatorDamage(t);return g(a)}getResonatorMaxDPS(t){const a=this.getResonatorDamage(t);return this.duration_1&&this.duration_2&&a?a/this.duration_1:0}getResonatorMaxDPSPercentageByBasedDPS(t,a){return this.getResonatorMaxDPS(t)/a}getResonatorMaxDPSPercentageStringByBasedDPS(t,a){const e=this.getResonatorMaxDPSPercentageByBasedDPS(t,a);return u(e)}getResonatorMaxDPSPercentage(t){const a=this.getResonatorMaxDPS(t),e=this.getMaxTeamDPS();return a/e}getResonatorMaxDPSPercentageString(t){const a=this.getResonatorMaxDPSPercentage(t);return u(a)}getResonatorDPSString(t){const a=this.getResonatorMaxDPS(t);return g(a)}getResonatorSkillBars(t){const a=this.duration_1,e=this.resonators[t],o=parseFloat(e.damage),s=e.skills,r=Object.keys(s),n=[];return r.forEach(i=>{const c=s[i],h=parseFloat(c.damage),p=h/a,l=h/o,b={text:i,dps:p,dpsString:g(p),damage:h,damageString:g(h),percentage:l,percentageString:u(l),data:c};n.push(b)}),n.sort(D),n}getResonatorSkillTypeBars(t){const a=this.resonators[t],e=parseFloat(a.damage),o=["normal_attack","resonance_skill","forte_circuit","resonance_liberation","intro_skill","outro_skill"],s=[];return o.forEach(r=>{const n=parseFloat(a[r]),i=n/e,c={text:r,damage:n,damageString:g(n),percentage:i,percentageString:u(i)};s.push(c)}),s}getResonatorSkillBonusBars(t){const a=this.resonators[t],e=parseFloat(a.damage),o=["basic","heavy","skill","liberation","intro","outro","echo","coordinated_attack","none"],s=[];return o.forEach(r=>{const n=parseFloat(a[r]),i=n/e,c={text:r,damage:n,damageString:g(n),percentage:i,percentageString:u(i)};s.push(c)}),s}}class k{constructor(t){d(this,"_data");Object.assign(this,t),this._data=t}getBars(t,a){const e=[];return this._data.forEach(o=>{const s=o[0],r=new _(o[1]),n=t-parseFloat(r.damage),i=n/t,c=a-r.getMaxTeamDPS(),h={text:s,dps:c,dpsString:g(c),damage:n,damageString:g(n),percentage:i,percentageString:u(i)};e.push(h)}),e.sort(D),e}}class N{constructor(t,a){d(this,"affixPolicy");d(this,"resonator_template");d(this,"damage_distribution");d(this,"damage_distributions_with_buffs");d(this,"calculated_rows");Object.assign(this,t),this.affixPolicy=a,this.resonator_template=new M(this.resonator_template),this.damage_distribution=new _(this.damage_distribution),this.damage_distributions_with_buffs=new k(this.damage_distributions_with_buffs)}getTeamDamageDistribution(){return this.damage_distribution}getResonatorDamageAnalysis(t){const e=S().getNameByNo(t);return x(this,`damage_distribution.resonators.${e}`)}getCalculatedRowBars(){const t=this.damage_distribution.getMaxTeamDPS(),a=this.calculated_rows,e=[];let o=0;return a.forEach(s=>{let r=0;s.damage&&(r=parseFloat(s.damage)),o=Math.max(o,r)}),a.forEach(s=>{let r=0;s.damage&&(r=parseFloat(s.damage));const n=r/o;let i=`【${s.action}】${s.skill_id}`;s.action||(i=s.skill_id);let c="white";r<=t&&(c="blue-grey-darken-2"),s.baseDamage=o,s.color=c;const h={text:i,damage:r,damageString:g(r),percentage:n,percentageString:u(n),data:s};e.push(h)}),e}}export{N as D,_ as T};
